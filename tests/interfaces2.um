fn intref(val: int): ^int {
    p := new(int)
    p^ = val
    return p
}

fn (x: ^int) print() {printf("int: {d}\n", x^)}

fn (x: ^[]int) print() {
    printf("vec: [")
    for i := 0; i < len(x^); i++ {
        printf("{d} ", x[i])
    } 
    printf("]\n")
}

type printable = interface {print()}

fn printany(x: interface{}) {
    if p := ^int(x); p != null {
        printf("{d}\n",   p^)
    } else if p := ^real(x); p != null {
        printf("{.3f}\n", p^)
    } else if p := ^str(x);  p != null {
        printf("{s}\n",   p^)
    }
}

fn main() {
    var b: []int = [3]int {7, 8, 9}    
    var d: []printable    
    {
       d = [2]printable {intref(5), b}
    }    
    for i := 0; i < len(d); i++ {d[i].print()}

    p := ^[]int(d[1])
    if p != null {p.print()}
    
    u := 17
    v := 18.3
    var s: str = "Hello!"
    
    printany(&u)
    printany(&v)
    printany(s)
}